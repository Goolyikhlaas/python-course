# Learning Virtual Environment and pip

## Introduction
Python provides powerful tools for managing project dependencies and environments. One of the most commonly used tools is `pip`, which helps install packages that are not included in the standard Python library. Another essential tool is the virtual environment, which allows you to create isolated environments for your projects, ensuring that each project has its own dependencies and packages.

## What is pip?
`pip` is the package installer for Python. You can use `pip` to install packages from the Python Package Index (PyPI) and other indexes. It is included with Python, so you don’t need to install it separately.

### Example Usage
To install a package using `pip`, you can use the following command:

```bash
python3 -m pip install package_name
```
### What is a Virtual Environment?

A virtual environment is a tool that helps to keep dependencies required by different projects in separate places, by creating isolated environments for them. It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable.

### Creating a Virtual Environment
To create a virtual environment, you can use the venv module, which is included in the standard Python library.

```bash
python3 -m venv myenv
```
This command creates a directory named myenv that contains a complete Python environment, including the Python interpreter, standard library, and various supporting files.

### Activating a Virtual Environment
Before you can use the virtual environment, you need to activate it.

On macOs/Linux:

```bash
source myenv/bin/activate
```

On windows:

```bash
source myenv\Scripts\activate
```

When the virtual environment is activated, you’ll see the name of the environment in your command prompt, indicating that it’s currently active.

### Installing Packages in a Virtual Environment
Once the virtual environment is active, you can use pip to install packages as usual. The packages will be installed in the virtual environment, not globally.

```bash
python3 -m pip install package_name
```

### Deactivating a Virtual Environment
To deactivate the virtual environment, simply run:

```bash
deactivate
```

### Useful pip Packages

Here are some useful packages that you can install using pip, along with a brief description of each:

requests: A simple, yet elegant HTTP library for making requests.
```bash
python3 -m pip install requests
```

numpy: A fundamental package for scientific computing with Python, providing support for arrays and matrices.
```bash
python3 -m pip install numpy
```

pandas: A powerful data analysis and manipulation library for Python.
```bash
python3 -m pip install pandas
```

matplotlib: A plotting library for creating static, animated, and interactive visualizations in Python.
```bash
python3 -m pip install matplotlib
```

scipy: A library used for scientific and technical computing.
```bash
python3 -m pip install scipy
```

scikit-learn: A machine learning library for Python, providing simple and efficient tools for data mining and data analysis.
```bash
python3 -m pip install scikit-learn
```

flask: A lightweight WSGI web application framework for Python, designed to make getting started quick and easy.
```bash
python3 -m pip install flask
```

django: A high-level Python web framework that encourages rapid development and clean, pragmatic design.
```bash
python3 -m pip install django
```

beautifulsoup4: A library for parsing HTML and XML documents, useful for web scraping.
```bash
python3 -m pip install beautifulsoup4
```

pytest: A framework that makes it easy to write simple and scalable test cases for Python code.
```bash
pip install pytest
```

To list packages just use

```bash
pip list  or python3 -m pip list
```
clear





